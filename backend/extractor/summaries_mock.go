// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package extractor

import (
	"context"
	"github.com/ukeeper/ukeeper-readability/backend/datastore"
	"sync"
)

// Ensure, that SummariesMock does implement Summaries.
// If this is not the case, regenerate this file with moq.
var _ Summaries = &SummariesMock{}

// SummariesMock is a mock implementation of Summaries.
//
//	func TestSomethingThatUsesSummaries(t *testing.T) {
//
//		// make and configure a mocked Summaries
//		mockedSummaries := &SummariesMock{
//			CleanupExpiredFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the CleanupExpired method")
//			},
//			DeleteFunc: func(ctx context.Context, contentHash string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, content string) (datastore.Summary, bool) {
//				panic("mock out the Get method")
//			},
//			SaveFunc: func(ctx context.Context, summary datastore.Summary) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedSummaries in code that requires Summaries
//		// and then make assertions.
//
//	}
type SummariesMock struct {
	// CleanupExpiredFunc mocks the CleanupExpired method.
	CleanupExpiredFunc func(ctx context.Context) (int64, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, contentHash string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, content string) (datastore.Summary, bool)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, summary datastore.Summary) error

	// calls tracks calls to the methods.
	calls struct {
		// CleanupExpired holds details about calls to the CleanupExpired method.
		CleanupExpired []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ContentHash is the contentHash argument value.
			ContentHash string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Content is the content argument value.
			Content string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Summary is the summary argument value.
			Summary datastore.Summary
		}
	}
	lockCleanupExpired sync.RWMutex
	lockDelete         sync.RWMutex
	lockGet            sync.RWMutex
	lockSave           sync.RWMutex
}

// CleanupExpired calls CleanupExpiredFunc.
func (mock *SummariesMock) CleanupExpired(ctx context.Context) (int64, error) {
	if mock.CleanupExpiredFunc == nil {
		panic("SummariesMock.CleanupExpiredFunc: method is nil but Summaries.CleanupExpired was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCleanupExpired.Lock()
	mock.calls.CleanupExpired = append(mock.calls.CleanupExpired, callInfo)
	mock.lockCleanupExpired.Unlock()
	return mock.CleanupExpiredFunc(ctx)
}

// CleanupExpiredCalls gets all the calls that were made to CleanupExpired.
// Check the length with:
//
//	len(mockedSummaries.CleanupExpiredCalls())
func (mock *SummariesMock) CleanupExpiredCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCleanupExpired.RLock()
	calls = mock.calls.CleanupExpired
	mock.lockCleanupExpired.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SummariesMock) Delete(ctx context.Context, contentHash string) error {
	if mock.DeleteFunc == nil {
		panic("SummariesMock.DeleteFunc: method is nil but Summaries.Delete was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ContentHash string
	}{
		Ctx:         ctx,
		ContentHash: contentHash,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, contentHash)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedSummaries.DeleteCalls())
func (mock *SummariesMock) DeleteCalls() []struct {
	Ctx         context.Context
	ContentHash string
} {
	var calls []struct {
		Ctx         context.Context
		ContentHash string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SummariesMock) Get(ctx context.Context, content string) (datastore.Summary, bool) {
	if mock.GetFunc == nil {
		panic("SummariesMock.GetFunc: method is nil but Summaries.Get was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Content string
	}{
		Ctx:     ctx,
		Content: content,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, content)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSummaries.GetCalls())
func (mock *SummariesMock) GetCalls() []struct {
	Ctx     context.Context
	Content string
} {
	var calls []struct {
		Ctx     context.Context
		Content string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *SummariesMock) Save(ctx context.Context, summary datastore.Summary) error {
	if mock.SaveFunc == nil {
		panic("SummariesMock.SaveFunc: method is nil but Summaries.Save was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Summary datastore.Summary
	}{
		Ctx:     ctx,
		Summary: summary,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, summary)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedSummaries.SaveCalls())
func (mock *SummariesMock) SaveCalls() []struct {
	Ctx     context.Context
	Summary datastore.Summary
} {
	var calls []struct {
		Ctx     context.Context
		Summary datastore.Summary
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
